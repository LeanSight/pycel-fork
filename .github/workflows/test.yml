name: Tests

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
        numpy-version: ["<2.0"]
        include:
          # Test NumPy 2.0 compatibility (limited functionality)
          - python-version: "3.11"
            numpy-version: ">=2.0"
            allow-failures: true

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "numpy${{ matrix.numpy-version }}"
        pip install -e .[dev,visualization]
    
    - name: Run Model Focusing tests
      run: |
        pytest model_focusing/test_model_focusing_core.py -v
    
    - name: Run core tests (NumPy 1.x only)
      if: matrix.numpy-version == '<2.0'
      run: |
        pytest tests/ -x --tb=short
    
    - name: Run core tests (NumPy 2.0+ - limited)
      if: matrix.numpy-version == '>=2.0'
      continue-on-error: true
      run: |
        # Skip GEXF-related tests with NumPy 2.0+
        pytest tests/ -x --tb=short -k "not gexf"
    
    - name: Test GEXF export compatibility
      run: |
        python -c "
        from pycel import ExcelCompiler
        from openpyxl import Workbook
        import numpy as np
        
        print(f'NumPy version: {np.__version__}')
        
        wb = Workbook()
        ws = wb.active
        ws['A1'] = 1
        ws['B1'] = '=A1*2'
        
        excel = ExcelCompiler(excel=wb)
        excel.evaluate('Sheet!B1')
        
        try:
            excel.export_to_gexf('test.gexf')
            print('✅ GEXF export successful')
        except RuntimeError as e:
            if 'NumPy 2.0' in str(e):
                print('⚠️ Expected GEXF limitation with NumPy 2.0+')
                print(f'Error: {e}')
            else:
                raise
        except Exception as e:
            print(f'❌ Unexpected error: {e}')
            raise
        "

  test-examples:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "numpy<2.0"
        pip install -e .[visualization]
    
    - name: Test Model Focusing examples
      run: |
        cd model_focusing
        python examples.py